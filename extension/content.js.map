{"version":3,"file":"content.js","mappings":";;;;;;;;;;;IAAMA,gBAAgB;EAElB,SAAAA,iBAAA,EAAc;IAAAC,eAAA,OAAAD,gBAAA;IACVE,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CAAC,CAAC;IACvD,IAAI,CAACC,cAAc,GAAG,KAAK,CAAC,CAAC;IAC7B,IAAI,CAACC,aAAa,EAAE;EACxB;EAACC,YAAA,CAAAN,gBAAA;IAAAO,GAAA;IAAAC,KAAA,EAED,SAAAH,cAAA,EAAgB;MAAA,IAAAI,KAAA;MACZC,MAAM,CAACC,OAAO,CAACC,SAAS,CAACC,WAAW,CAAC,UAACC,OAAO,EAAEC,MAAM,EAAEC,YAAY,EAAK;QACpEd,OAAO,CAACC,GAAG,CAAC,iCAAiC,EAAEW,OAAO,CAAC,CAAC,CAAC;QACzD,IAAIA,OAAO,CAACG,MAAM,KAAK,QAAQ,EAAE;UAC7Bf,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CAAC,CAAC;UACzCM,KAAI,CAACS,eAAe,EAAE;QAC1B;QACA,IAAIJ,OAAO,CAACG,MAAM,KAAK,gBAAgB,IAAI,CAACR,KAAI,CAACL,cAAc,EAAE;UAC7DF,OAAO,CAACC,GAAG,CAAC,6DAA6D,CAAC,CAAC,CAAC;UAC5EM,KAAI,CAACU,mBAAmB,EAAE;UAC1BV,KAAI,CAACL,cAAc,GAAG,IAAI,CAAC,CAAC;QAChC;MACJ,CAAC,CAAC;IACN;EAAC;IAAAG,GAAA;IAAAC,KAAA,EAED,SAAAU,gBAAA,EAAkB;MACdhB,OAAO,CAACC,GAAG,CAAC,sDAAsD,CAAC;MACnE,IAAMiB,MAAM,GAAG,oMAAoM,CAAC,CAAC;MACrN;MACA;MACA;MACAV,MAAM,CAACC,OAAO,CAACU,WAAW,CAAC;QAAEJ,MAAM,EAAE;MAAe,CAAC,CAAC;IAC1D;EAAC;IAAAV,GAAA;IAAAC,KAAA,EAED,SAAAW,oBAAA,EAAsB;MAClB,IAAIG,MAAM,CAACC,QAAQ,CAACC,IAAI,KAAK,sBAAsB,EAAE;QAAE;QACnDtB,OAAO,CAACC,GAAG,CAAC,iDAAiD,CAAC;QAC9D,IAAIsB,UAAU,GAAG,CAAC,CAAC,CAAC;QACpB,IAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;QACvB,IAAMC,UAAU,GAAGC,WAAW,CAAC,YAAM;UACjC,IAAMC,KAAK,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;UAChD,IAAMC,MAAM,GAAGF,QAAQ,CAACC,aAAa,CAAC,iBAAiB,CAAC;UAExD,IAAIF,KAAK,IAAIG,MAAM,EAAE;YACjB,IAAMZ,MAAM,GAAG,oMAAoM;YACnNS,KAAK,CAACrB,KAAK,GAAGY,MAAM;YACpBY,MAAM,CAACC,KAAK,EAAE;YACd/B,OAAO,CAACC,GAAG,CAAC,qCAAqC,CAAC;YAClD+B,aAAa,CAACP,UAAU,CAAC,CAAC,CAAC;UAC/B,CAAC,MAAM;YACHzB,OAAO,CAACC,GAAG,CAAC,2CAA2C,CAAC;YACxDsB,UAAU,EAAE;YACZ,IAAIA,UAAU,IAAIC,UAAU,EAAE;cAC1BxB,OAAO,CAACiC,KAAK,CAAC,gCAAgC,CAAC;cAC/CD,aAAa,CAACP,UAAU,CAAC,CAAC,CAAC;YAC/B;UACJ;QACJ,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;MACd,CAAC,MAAM;QACHzB,OAAO,CAACiC,KAAK,CAAC,mCAAmC,EAAEb,MAAM,CAACC,QAAQ,CAACC,IAAI,CAAC;MAC5E;IACJ;EAAC;EAAA,OAAAxB,gBAAA;AAAA;AAGL,IAAMoC,aAAa,GAAG,IAAIpC,gBAAgB,EAAE,C","sources":["webpack://empty-project/./src/index.js"],"sourcesContent":["class ChatGPTExtension {\r\n\r\n    constructor() {\r\n        console.log(\"ChatGPTExtension initialized: index.js\"); // Log initialization\r\n        this.promptInjected = false; // Flag to prevent multiple injections\r\n        this.handleRequest();\r\n    }\r\n\r\n    handleRequest() {\r\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n            console.log(\"Message received in content.js:\", request); // Log received message\r\n            if (request.action === \"PROMPT\") {\r\n                console.log(\"PROMPT action recognized\"); // Log action recognition\r\n                this.promptToChatGPT();\r\n            }\r\n            if (request.action === \"PROMPT_PROCEED\" && !this.promptInjected) {\r\n                console.log(\"PROMPT PROCEED inject prompt to summarize action recognized\"); // Log action recognition\r\n                this.promptOnChatGPTPage();\r\n                this.promptInjected = true; // Set flag to prevent reinjection\r\n            }\r\n        });\r\n    }\r\n    \r\n    promptToChatGPT() {\r\n        console.log(\"We gathered the info and are prompting to ChatGPT...\");\r\n        const prompt = \"From now on, if you need to summarize text given to you from an article or a website, write a short summary of the text displayed on the website mentioning the important aspects of that content.\"; // Get this from the summarizable website\r\n        //Plan:\r\n        //here gathers promptable info from website: index.js\r\n        // Send message to background script to open ChatGPT page\r\n        chrome.runtime.sendMessage({ action: \"OPEN_CHATGPT\" });\r\n    }\r\n\r\n    promptOnChatGPTPage() {\r\n        if (window.location.href === \"https://chatgpt.com/\") { // Ensure this URL is correct\r\n            console.log(\"On ChatGPT page, attempting to inject prompt...\");\r\n            let retryCount = 0; // Initialize retry counter\r\n            const maxRetries = 20; // Maximum number of retries\r\n            const intervalId = setInterval(() => {\r\n                const input = document.querySelector(\"textarea\");\r\n                const button = document.querySelector(\"textarea~button\");\r\n    \r\n                if (input && button) {\r\n                    const prompt = \"From now on, if you need to summarize text given to you from an article or a website, write a short summary of the text displayed on the website mentioning the important aspects of that content.\";\r\n                    input.value = prompt;\r\n                    button.click();\r\n                    console.log(\"Prompt injected and button clicked.\");\r\n                    clearInterval(intervalId); // Stop checking once done\r\n                } else {\r\n                    console.log(\"Textarea or button not found, retrying...\");\r\n                    retryCount++;\r\n                    if (retryCount >= maxRetries) {\r\n                        console.error(\"Max retries reached. Stopping.\");\r\n                        clearInterval(intervalId); // Stop checking after max retries\r\n                    }\r\n                }\r\n            }, 1000); // Retry every 1000ms (1 second)\r\n        } else {\r\n            console.error(\"Not on ChatGPT page. Current URL:\", window.location.href);\r\n        }\r\n    }\r\n}\r\n\r\nconst CGPTExtension = new ChatGPTExtension();\r\n"],"names":["ChatGPTExtension","_classCallCheck","console","log","promptInjected","handleRequest","_createClass","key","value","_this","chrome","runtime","onMessage","addListener","request","sender","sendResponse","action","promptToChatGPT","promptOnChatGPTPage","prompt","sendMessage","window","location","href","retryCount","maxRetries","intervalId","setInterval","input","document","querySelector","button","click","clearInterval","error","CGPTExtension"],"sourceRoot":""}